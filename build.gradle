apply plugin: 'org.ajoberstar.grgit'
apply from: "shared.gradle"

import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    ext {
        kotlinVersion = '1.2.31'
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.0'
        classpath "org.ajoberstar:gradle-git:1.7.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
        classpath "gradle.plugin.org.jmailen.gradle:kotlinter-gradle:1.7.0"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
}

ext {
    git = Grgit.open(currentDir: projectDir)
    gitVersionCode = getGitVersionCode(git)
    gitVersionName = getGitVersionName(git)

    artifactOrg = 'com.schibsted.account'
    artifactVersion = gitVersionName

    libs = [
            assertJ         : "3.6.2",
            barista         : "2.3.0",
            constraintLayout: "1.0.2",
            coroutines      : "0.19.3",
            identity        : "0.4.0",
            jUnit           : "4.12",
            kotlin          : ext.kotlinVersion,
            kotlintest      : "2.0.7",
            mockitoKotlin   : "1.5.0",
            mockitoAndroid  : "2.13.0",
            multidex        : "1.0.3",
            retrofit        : "2.3.0",
            smartlock       : "11.8.0",
            support         : "27.1.0"
    ]

    conf = [
            minSdk    : 14,
            targetSdk : 27,
            compileSdk: 27,
            buildTools: "27.0.3"
    ]

    pomConfig = {
        licenses {
            license {
                name "MIT License"
                url "http://www.opensource.org/licenses/mit-license.php"
            }
        }
        developers {
            developer {
                name "HÃ¥vard Kindem"
                email "havard.kindem@schibsted.com"
                organization "Schibsted"
                organizationUrl "http://www.schibsted.com/"
            }
            developer {
                name "Antoine Promerova"
                email "antoine.promerova@schibsted.com"
                organization "Schibsted"
                organizationUrl "http://www.schibsted.com/"
            }
        }

        scm {
            connection "scm:git:git://github.com/schibsted/account-sdk-android.git"
            developerConnection "scm:git:ssh://github.com:schibsted/account-sdk-android.git"
            url "https://github.com/schibsted/account-sdk-android"
        }
    }
}

task clean(type: Delete, group: 'build') {
    delete rootProject.allprojects.collect { project -> project.buildDir }
    followSymlinks false
}

subprojects { proj ->
    if (proj.name == "example") return

    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'

    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'

    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    android {
        buildToolsVersion conf.buildTools
        compileSdkVersion conf.compileSdk

        defaultConfig {
            minSdkVersion conf.minSdk
            targetSdkVersion conf.targetSdk
            versionCode gitVersionCode
            versionName gitVersionName
            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        }

        lintOptions {
            lintConfig file("${rootProject.rootDir}/config/lint.xml")
            htmlOutput file("${buildDir}/reports/checkstyle.html")
            warningsAsErrors true
            checkAllWarnings true
            xmlReport false
        }

        kotlinOptions {
            apiVersion = '1.2'
            languageVersion = '1.2'
        }

        dexOptions {
            javaMaxHeapSize "4g"
        }
    }

    task findbugs(type: FindBugs, dependsOn: 'assemble', group: 'verification') {
        excludeFilter = file("${rootProject.rootDir}/config/findbugs.xml")
        source = android.sourceSets.main.java.srcDirs
        classes = fileTree("$buildDir/intermediates/classes")
        classpath = files()

        reports {
            xml.enabled = false
            html.enabled = true
            html.setDestination(file("$buildDir/reports/findbugs.html"))
        }
    }

    task pmd(type: Pmd, dependsOn: 'assemble', group: 'verification') {
        ruleSetFiles = files("${rootProject.rootDir}/config/pmd.xml")
        source = android.sourceSets.main.java.srcDirs
        include '**/*.java'
        ignoreFailures = false

        reports {
            xml.enabled = false
            html.enabled = true
            html.destination file("$buildDir/reports/pmd.html")
        }
    }

    kotlinter {
        continuationIndentSize = 4
    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "${proj.buildDir}/docs"
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "${proj.buildDir}/javadoc"
    }

    task sourceJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier "source"
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from "$buildDir/javadoc"
    }
}
